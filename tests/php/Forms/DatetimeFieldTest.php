<?php

namespace SilverStripe\Forms\Tests;

use SilverStripe\Dev\SapphireTest;
use SilverStripe\Control\Controller;
use SilverStripe\Forms\DatetimeField;
use SilverStripe\Forms\RequiredFields;
use SilverStripe\Forms\DateField;
use SilverStripe\Forms\Tests\DatetimeFieldTest\Model;
use SilverStripe\Forms\TimeField;
use SilverStripe\Forms\FieldList;
use SilverStripe\Forms\FormAction;
use SilverStripe\Forms\Form;
use SilverStripe\i18n\i18n;
use SilverStripe\ORM\FieldType\DBDatetime;

class DatetimeFieldTest extends SapphireTest
{
    protected $timezone = null;

    protected function setUp()
    {
        parent::setUp();
        i18n::set_locale('en_NZ');
        $this->timezone = date_default_timezone_get();
    }

    protected function tearDown()
    {
        date_default_timezone_set($this->timezone);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testFormSaveInto()
    {
        $dateTimeField = new DatetimeField('MyDatetime');
        $form = $this->getMockForm();
        $form->Fields()->push($dateTimeField);

        $dateTimeField->setSubmittedValue('2003-03-29T23:59:38');
        $validator = new RequiredFields();
        $this->assertTrue($dateTimeField->validate($validator));
        $m = new Model();
        $form->saveInto($m);
        $this->assertEquals('2003-03-29 23:59:38', $m->MyDatetime);
    }

    public function testFormSaveIntoLocalised()
    {
        $dateTimeField = new DatetimeField('MyDatetime');
        $dateTimeField
            ->setHTML5(false)
            ->setLocale('en_NZ');

        $form = $this->getMockForm();
        $form->Fields()->push($dateTimeField);

        // en_NZ standard format
        $dateTimeField->setSubmittedValue('29/03/2003 11:59:38 pm');
        $validator = new RequiredFields();
        $this->assertTrue($dateTimeField->validate($validator));
        $m = new Model();
        $form->saveInto($m);
        $this->assertEquals('2003-03-29 23:59:38', $m->MyDatetime);
    }

    public function testDataValue()
    {
        $f = new DatetimeField('Datetime');
        $this->assertEquals(null, $f->dataValue(), 'Empty field');

        $f = new DatetimeField('Datetime', null, '2003-03-29 23:59:38');
        $this->assertEquals('2003-03-29 23:59:38', $f->dataValue(), 'From date/time string');
    }

    public function testConstructorWithoutArgs()
    {
        $f = new DatetimeField('Datetime');
        $this->assertEquals($f->dataValue(), null);
    }

    public function testConstructorWithLocalizedDateSetsNullValue()
    {
        $f = new DatetimeField('Datetime', 'Datetime', '29/03/2003 23:59:38');
        $this->assertNull($f->Value());
    }

    public function testConstructorWithIsoDate()
    {
        // used by Form->loadDataFrom()
        $f = new DatetimeField('Datetime', 'Datetime', '2003-03-29 23:59:38');
        $this->assertEquals($f->dataValue(), '2003-03-29 23:59:38');
    }

    public function testSetValueWithDateTimeString()
    {
        $f = new DatetimeField('Datetime', 'Datetime');
        $f->setValue('2003-03-29 23:59:38');
        $this->assertEquals($f->dataValue(), '2003-03-29 23:59:38');

        $f = new DatetimeField('Datetime', 'Datetime');
        $f->setValue('2003-03-29T23:59:38');
        $this->assertEquals($f->dataValue(), '2003-03-29 23:59:38', 'Normalised ISO');
    }

    public function testSubmittedValue()
    {
        $datetimeField = new DatetimeField('Datetime', 'Datetime');
        $datetimeField->setSubmittedValue('2003-03-29 23:00:00');
        $this->assertEquals($datetimeField->dataValue(), '2003-03-29 23:00:00');

        $datetimeField = new DatetimeField('Datetime', 'Datetime');
        $datetimeField->setSubmittedValue('2003-03-29T23:00:00');
        $this->assertEquals($datetimeField->dataValue(), '2003-03-29 23:00:00', 'Normalised ISO');
    }

    public function testSetValueWithLocalised()
    {
        $datetimeField = new DatetimeField('Datetime', 'Datetime');

        $datetimeField
            ->setHTML5(false)
            ->setLocale('en_NZ');

        $datetimeField->setSubmittedValue('29/03/2003 11:00:00 pm');
        $this->assertEquals($datetimeField->dataValue(), '2003-03-29 23:00:00');

        // Some localisation packages exclude the ',' in default medium format
        $this->assertRegExp(
            '#29/03/2003(,)? 11:00:00 (PM|pm)#',
            $datetimeField->Value(),
            'User value is formatted, and in user timezone'
        );
    }

    public function testValidate()
    {
        $f = new DatetimeField('Datetime', 'Datetime', '2003-03-29 23:59:38');
        $this->assertTrue($f->validate(new RequiredFields()));

        $f = new DatetimeField('Datetime', 'Datetime', '2003-03-29T23:59:38');
        $this->assertTrue($f->validate(new RequiredFields()), 'Normalised ISO');

        $f = new DatetimeField('Datetime', 'Datetime', '2003-03-29 00:00:00');
        $this->assertTrue($f->validate(new RequiredFields()));

        $f = (new DatetimeField('Datetime', 'Datetime'))
            ->setSubmittedValue('2003-03-29 00:00');
        $this->assertTrue($f->validate(new RequiredFields()), 'Leaving out seconds (like many browsers)');

        $f = new DatetimeField('Datetime', 'Datetime', 'wrong');
        $this->assertFalse($f->validate(new RequiredFields()));
    }

    public function testSetMinDate()
    {
        $f = (new DatetimeField('Datetime'))->setMinDatetime('2009-03-31T23:00:00');
        $this->assertEquals($f->getMinDatetime(), '2009-03-31T23:00:00', 'Retains normalised ISO');

        $f = (new DatetimeField('Datetime'))->setMinDatetime('2009-03-31 23:00:00');
        $this->assertEquals($f->getMinDatetime(), '2009-03-31T23:00:00', 'Converts ISO to normalised ISO');

        $f = (new DatetimeField('Datetime'))->setMinDatetime('invalid');
        $this->assertNull($f->getMinDatetime(), 'Ignores invalid values');
    }

    public function testSetMaxDate()
    {
        $f = (new DatetimeField('Datetime'))->setMaxDatetime('2009-03-31T23:00:00');
        $this->assertEquals($f->getMaxDatetime(), '2009-03-31T23:00:00', 'Retains normalised ISO');

        $f = (new DatetimeField('Datetime'))->setMaxDatetime('2009-03-31 23:00:00');
        $this->assertEquals($f->getMaxDatetime(), '2009-03-31T23:00:00', 'Converts ISO to normalised ISO');

        $f = (new DatetimeField('Datetime'))->setMaxDatetime('invalid');
        $this->assertNull($f->getMaxDatetime(), 'Ignores invalid values');
    }

    public function testValidateMinDate()
    {
        $dateField = new DatetimeField('Datetime');
        $dateField->setMinDatetime('2009-03-31 23:00:00');
        $dateField->setValue('2009-03-31 23:00:01');
        $this->assertTrue($dateField->validate(new RequiredFields()), 'Time above min datetime');

        $dateField = new DatetimeField('Datetime');
        $dateField->setMinDatetime('2009-03-31 23:00:00');
        $dateField->setValue('2009-03-31 22:00:00');
        $this->assertFalse($dateField->validate(new RequiredFields()), 'Time below min datetime');

        $dateField = new DatetimeField('Datetime');
        $dateField->setMinDatetime('2009-03-31 23:00:00');
        $dateField->setValue('2009-03-31 23:00:00');
        $this->assertTrue($dateField->validate(new RequiredFields()), 'Date and time matching min datetime');

        $dateField = new DatetimeField('Datetime');
        $dateField->setMinDatetime('2009-03-31 23:00:00');
        $dateField->setValue('2008-03-31 23:00:00');
        $this->assertFalse($dateField->validate(new RequiredFields()), 'Date below min datetime');

        $dateField = new DatetimeField('Datetime');
        $dateField->setMinDatetime('2009-03-31T23:00:00');
        $dateField->setValue('2009-03-31T23:00:01');
        $this->assertTrue($dateField->validate(new RequiredFields()), 'Time above min datetime with normalised ISO');
    }

    public function testValidateMinDateStrtotime()
    {
        $f = new DatetimeField('Datetime');
        $f->setMinDatetime('-7 days');
        $f->setValue(strftime('%Y-%m-%d %T', strtotime('-8 days', DBDatetime::now()->getTimestamp())));
        $this->assertFalse($f->validate(new RequiredFields()), 'Date below min datetime, with strtotime');

        $f = new DatetimeField('Datetime');
        $f->setMinDatetime('-7 days');
        $f->setValue(strftime('%Y-%m-%d %T', strtotime('-7 days', DBDatetime::now()->getTimestamp())));
        $this->assertTrue($f->validate(new RequiredFields()), 'Date matching min datetime, with strtotime');
    }

    public function testValidateMaxDateStrtotime()
    {
        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('7 days');
        $f->setValue(strftime('%Y-%m-%d %T', strtotime('8 days', DBDatetime::now()->getTimestamp())));
        $this->assertFalse($f->validate(new RequiredFields()), 'Date above max date, with strtotime');

        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('7 days');
        $f->setValue(strftime('%Y-%m-%d %T', strtotime('7 days', DBDatetime::now()->getTimestamp())));
        $this->assertTrue($f->validate(new RequiredFields()), 'Date matching max date, with strtotime');
    }

    public function testValidateMaxDate()
    {
        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('2009-03-31 23:00:00');
        $f->setValue('2009-03-31 22:00:00');
        $this->assertTrue($f->validate(new RequiredFields()), 'Time below max datetime');

        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('2009-03-31 23:00:00');
        $f->setValue('2010-03-31 23:00:01');
        $this->assertFalse($f->validate(new RequiredFields()), 'Time above max datetime');

        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('2009-03-31 23:00:00');
        $f->setValue('2009-03-31 23:00:00');
        $this->assertTrue($f->validate(new RequiredFields()), 'Date and time matching max datetime');

        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('2009-03-31 23:00:00');
        $f->setValue('2010-03-31 23:00:00');
        $this->assertFalse($f->validate(new RequiredFields()), 'Date above max datetime');

        $f = new DatetimeField('Datetime');
        $f->setMaxDatetime('2009-03-31T23:00:00');
        $f->setValue('2009-03-31T22:00:00');
        $this->assertTrue($f->validate(new RequiredFields()), 'Time below max datetime with normalised ISO');
    }

    public function testTimezoneSetValueLocalised()
    {
        date_default_timezone_set('Europe/Berlin');
        // Berlin and Auckland have 12h time difference in northern hemisphere winter
        $datetimeField = new DatetimeField('Datetime', 'Datetime');

        $datetimeField
            ->setHTML5(false)
            ->setDatetimeFormat('dd/MM/y HH:mm:ss');

        $datetimeField->setTimezone('Pacific/Auckland');
        $datetimeField->setValue('2003-12-24 23:59:59');
        $this->assertEquals(
            '25/12/2003 11:59:59',
            $datetimeField->Value(),
            'User value is formatted, and in user timezone'
        );

        $this->assertEquals(
            '2003-12-24 23:59:59',
            $datetimeField->dataValue(),
            'Data value is in ISO format, and in server timezone'
        );
    }

    public function testTimezoneSetValueWithHtml5()
    {
        date_default_timezone_set('Europe/Berlin');
        // Berlin and Auckland have 12h time difference in northern hemisphere winter
        $datetimeField = new DatetimeField('Datetime', 'Datetime');

        $datetimeField->setTimezone('Pacific/Auckland');
        $datetimeField->setValue('2003-12-24 23:59:59');
        $this->assertEquals(
            '2003-12-25T11:59:59',
            $datetimeField->Value(),
            'User value is in normalised ISO format and in user timezone'
        );

        $this->assertEquals(
            '2003-12-24 23:59:59',
            $datetimeField->dataValue(),
            'Data value is in ISO format, and in server timezone'
        );
    }

    public function testTimezoneSetSubmittedValueLocalised()
    {
        date_default_timezone_set('Europe/Berlin');
        // Berlin and Auckland have 12h time difference in northern hemisphere summer, but Berlin and Moscow only 2h.
        $datetimeField = new DatetimeField('Datetime', 'Datetime');

        $datetimeField
            ->setHTML5(false)
            ->setLocale('en_NZ');

        $datetimeField->setTimezone('Europe/Moscow');
        // pass in default format, at user time (Moscow)
        $datetimeField->setSubmittedValue('24/06/2003 11:59:59 pm');
        $this->assertTrue($datetimeField->validate(new RequiredFields()));
        $this->assertEquals('2003-06-24 21:59:59', $datetimeField->dataValue(), 'Data value matches server timezone');
    }

    public function testGetName()
    {
        $field = new DatetimeField('Datetime');

        $this->assertEquals('Datetime', $field->getName());
    }

    public function testSetName()
    {
        $field = new DatetimeField('Datetime', 'Datetime');
        $field->setName('CustomDatetime');
        $this->assertEquals('CustomDatetime', $field->getName());
    }

    protected function getMockForm()
    {
        /** @skipUpgrade */
        return new Form(
            new Controller(),
            'Form',
            new FieldList(),
            new FieldList(
                new FormAction('doSubmit')
            )
        );
    }

}
